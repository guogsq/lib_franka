// Generated by gencpp from file de_msgs/QueryBrickLocResponse.msg
// DO NOT EDIT!


#ifndef DE_MSGS_MESSAGE_QUERYBRICKLOCRESPONSE_H
#define DE_MSGS_MESSAGE_QUERYBRICKLOCRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace de_msgs
{
template <class ContainerAllocator>
struct QueryBrickLocResponse_
{
  typedef QueryBrickLocResponse_<ContainerAllocator> Type;

  QueryBrickLocResponse_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , wx(0.0)
    , wy(0.0)
    , wz(0.0)  {
    }
  QueryBrickLocResponse_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , wx(0.0)
    , wy(0.0)
    , wz(0.0)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _wx_type;
  _wx_type wx;

   typedef double _wy_type;
  _wy_type wy;

   typedef double _wz_type;
  _wz_type wz;





  typedef boost::shared_ptr< ::de_msgs::QueryBrickLocResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::de_msgs::QueryBrickLocResponse_<ContainerAllocator> const> ConstPtr;

}; // struct QueryBrickLocResponse_

typedef ::de_msgs::QueryBrickLocResponse_<std::allocator<void> > QueryBrickLocResponse;

typedef boost::shared_ptr< ::de_msgs::QueryBrickLocResponse > QueryBrickLocResponsePtr;
typedef boost::shared_ptr< ::de_msgs::QueryBrickLocResponse const> QueryBrickLocResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::de_msgs::QueryBrickLocResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::de_msgs::QueryBrickLocResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::de_msgs::QueryBrickLocResponse_<ContainerAllocator1> & lhs, const ::de_msgs::QueryBrickLocResponse_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.wx == rhs.wx &&
    lhs.wy == rhs.wy &&
    lhs.wz == rhs.wz;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::de_msgs::QueryBrickLocResponse_<ContainerAllocator1> & lhs, const ::de_msgs::QueryBrickLocResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace de_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::de_msgs::QueryBrickLocResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::de_msgs::QueryBrickLocResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::de_msgs::QueryBrickLocResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::de_msgs::QueryBrickLocResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::de_msgs::QueryBrickLocResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::de_msgs::QueryBrickLocResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::de_msgs::QueryBrickLocResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4b0a1f9128335871daf9429e0c162294";
  }

  static const char* value(const ::de_msgs::QueryBrickLocResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4b0a1f9128335871ULL;
  static const uint64_t static_value2 = 0xdaf9429e0c162294ULL;
};

template<class ContainerAllocator>
struct DataType< ::de_msgs::QueryBrickLocResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "de_msgs/QueryBrickLocResponse";
  }

  static const char* value(const ::de_msgs::QueryBrickLocResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::de_msgs::QueryBrickLocResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 wx\n"
"float64 wy\n"
"float64 wz\n"
"\n"
;
  }

  static const char* value(const ::de_msgs::QueryBrickLocResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::de_msgs::QueryBrickLocResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.wx);
      stream.next(m.wy);
      stream.next(m.wz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct QueryBrickLocResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::de_msgs::QueryBrickLocResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::de_msgs::QueryBrickLocResponse_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "wx: ";
    Printer<double>::stream(s, indent + "  ", v.wx);
    s << indent << "wy: ";
    Printer<double>::stream(s, indent + "  ", v.wy);
    s << indent << "wz: ";
    Printer<double>::stream(s, indent + "  ", v.wz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DE_MSGS_MESSAGE_QUERYBRICKLOCRESPONSE_H

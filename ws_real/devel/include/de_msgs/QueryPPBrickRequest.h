// Generated by gencpp from file de_msgs/QueryPPBrickRequest.msg
// DO NOT EDIT!


#ifndef DE_MSGS_MESSAGE_QUERYPPBRICKREQUEST_H
#define DE_MSGS_MESSAGE_QUERYPPBRICKREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace de_msgs
{
template <class ContainerAllocator>
struct QueryPPBrickRequest_
{
  typedef QueryPPBrickRequest_<ContainerAllocator> Type;

  QueryPPBrickRequest_()
    : h_x(0.0)
    , h_y(0.0)
    , h_z(0.0)
    , h_wx(0.0)
    , h_wy(0.0)
    , h_wz(0.0)
    , b_x(0.0)
    , b_y(0.0)
    , b_z(0.0)
    , b_wx(0.0)
    , b_wy(0.0)
    , b_wz(0.0)
    , g_x(0.0)
    , g_y(0.0)
    , g_z(0.0)
    , g_wx(0.0)
    , g_wy(0.0)
    , g_wz(0.0)  {
    }
  QueryPPBrickRequest_(const ContainerAllocator& _alloc)
    : h_x(0.0)
    , h_y(0.0)
    , h_z(0.0)
    , h_wx(0.0)
    , h_wy(0.0)
    , h_wz(0.0)
    , b_x(0.0)
    , b_y(0.0)
    , b_z(0.0)
    , b_wx(0.0)
    , b_wy(0.0)
    , b_wz(0.0)
    , g_x(0.0)
    , g_y(0.0)
    , g_z(0.0)
    , g_wx(0.0)
    , g_wy(0.0)
    , g_wz(0.0)  {
  (void)_alloc;
    }



   typedef double _h_x_type;
  _h_x_type h_x;

   typedef double _h_y_type;
  _h_y_type h_y;

   typedef double _h_z_type;
  _h_z_type h_z;

   typedef double _h_wx_type;
  _h_wx_type h_wx;

   typedef double _h_wy_type;
  _h_wy_type h_wy;

   typedef double _h_wz_type;
  _h_wz_type h_wz;

   typedef double _b_x_type;
  _b_x_type b_x;

   typedef double _b_y_type;
  _b_y_type b_y;

   typedef double _b_z_type;
  _b_z_type b_z;

   typedef double _b_wx_type;
  _b_wx_type b_wx;

   typedef double _b_wy_type;
  _b_wy_type b_wy;

   typedef double _b_wz_type;
  _b_wz_type b_wz;

   typedef double _g_x_type;
  _g_x_type g_x;

   typedef double _g_y_type;
  _g_y_type g_y;

   typedef double _g_z_type;
  _g_z_type g_z;

   typedef double _g_wx_type;
  _g_wx_type g_wx;

   typedef double _g_wy_type;
  _g_wy_type g_wy;

   typedef double _g_wz_type;
  _g_wz_type g_wz;





  typedef boost::shared_ptr< ::de_msgs::QueryPPBrickRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::de_msgs::QueryPPBrickRequest_<ContainerAllocator> const> ConstPtr;

}; // struct QueryPPBrickRequest_

typedef ::de_msgs::QueryPPBrickRequest_<std::allocator<void> > QueryPPBrickRequest;

typedef boost::shared_ptr< ::de_msgs::QueryPPBrickRequest > QueryPPBrickRequestPtr;
typedef boost::shared_ptr< ::de_msgs::QueryPPBrickRequest const> QueryPPBrickRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::de_msgs::QueryPPBrickRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::de_msgs::QueryPPBrickRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::de_msgs::QueryPPBrickRequest_<ContainerAllocator1> & lhs, const ::de_msgs::QueryPPBrickRequest_<ContainerAllocator2> & rhs)
{
  return lhs.h_x == rhs.h_x &&
    lhs.h_y == rhs.h_y &&
    lhs.h_z == rhs.h_z &&
    lhs.h_wx == rhs.h_wx &&
    lhs.h_wy == rhs.h_wy &&
    lhs.h_wz == rhs.h_wz &&
    lhs.b_x == rhs.b_x &&
    lhs.b_y == rhs.b_y &&
    lhs.b_z == rhs.b_z &&
    lhs.b_wx == rhs.b_wx &&
    lhs.b_wy == rhs.b_wy &&
    lhs.b_wz == rhs.b_wz &&
    lhs.g_x == rhs.g_x &&
    lhs.g_y == rhs.g_y &&
    lhs.g_z == rhs.g_z &&
    lhs.g_wx == rhs.g_wx &&
    lhs.g_wy == rhs.g_wy &&
    lhs.g_wz == rhs.g_wz;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::de_msgs::QueryPPBrickRequest_<ContainerAllocator1> & lhs, const ::de_msgs::QueryPPBrickRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace de_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::de_msgs::QueryPPBrickRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::de_msgs::QueryPPBrickRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::de_msgs::QueryPPBrickRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::de_msgs::QueryPPBrickRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::de_msgs::QueryPPBrickRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::de_msgs::QueryPPBrickRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::de_msgs::QueryPPBrickRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "01bf0e28af7b2b12d4b05c646cc7d76b";
  }

  static const char* value(const ::de_msgs::QueryPPBrickRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x01bf0e28af7b2b12ULL;
  static const uint64_t static_value2 = 0xd4b05c646cc7d76bULL;
};

template<class ContainerAllocator>
struct DataType< ::de_msgs::QueryPPBrickRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "de_msgs/QueryPPBrickRequest";
  }

  static const char* value(const ::de_msgs::QueryPPBrickRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::de_msgs::QueryPPBrickRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 h_x\n"
"float64 h_y\n"
"float64 h_z\n"
"float64 h_wx\n"
"float64 h_wy\n"
"float64 h_wz\n"
"\n"
"float64 b_x\n"
"float64 b_y\n"
"float64 b_z\n"
"float64 b_wx\n"
"float64 b_wy\n"
"float64 b_wz\n"
"\n"
"float64 g_x\n"
"float64 g_y\n"
"float64 g_z\n"
"float64 g_wx\n"
"float64 g_wy\n"
"float64 g_wz\n"
;
  }

  static const char* value(const ::de_msgs::QueryPPBrickRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::de_msgs::QueryPPBrickRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.h_x);
      stream.next(m.h_y);
      stream.next(m.h_z);
      stream.next(m.h_wx);
      stream.next(m.h_wy);
      stream.next(m.h_wz);
      stream.next(m.b_x);
      stream.next(m.b_y);
      stream.next(m.b_z);
      stream.next(m.b_wx);
      stream.next(m.b_wy);
      stream.next(m.b_wz);
      stream.next(m.g_x);
      stream.next(m.g_y);
      stream.next(m.g_z);
      stream.next(m.g_wx);
      stream.next(m.g_wy);
      stream.next(m.g_wz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct QueryPPBrickRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::de_msgs::QueryPPBrickRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::de_msgs::QueryPPBrickRequest_<ContainerAllocator>& v)
  {
    s << indent << "h_x: ";
    Printer<double>::stream(s, indent + "  ", v.h_x);
    s << indent << "h_y: ";
    Printer<double>::stream(s, indent + "  ", v.h_y);
    s << indent << "h_z: ";
    Printer<double>::stream(s, indent + "  ", v.h_z);
    s << indent << "h_wx: ";
    Printer<double>::stream(s, indent + "  ", v.h_wx);
    s << indent << "h_wy: ";
    Printer<double>::stream(s, indent + "  ", v.h_wy);
    s << indent << "h_wz: ";
    Printer<double>::stream(s, indent + "  ", v.h_wz);
    s << indent << "b_x: ";
    Printer<double>::stream(s, indent + "  ", v.b_x);
    s << indent << "b_y: ";
    Printer<double>::stream(s, indent + "  ", v.b_y);
    s << indent << "b_z: ";
    Printer<double>::stream(s, indent + "  ", v.b_z);
    s << indent << "b_wx: ";
    Printer<double>::stream(s, indent + "  ", v.b_wx);
    s << indent << "b_wy: ";
    Printer<double>::stream(s, indent + "  ", v.b_wy);
    s << indent << "b_wz: ";
    Printer<double>::stream(s, indent + "  ", v.b_wz);
    s << indent << "g_x: ";
    Printer<double>::stream(s, indent + "  ", v.g_x);
    s << indent << "g_y: ";
    Printer<double>::stream(s, indent + "  ", v.g_y);
    s << indent << "g_z: ";
    Printer<double>::stream(s, indent + "  ", v.g_z);
    s << indent << "g_wx: ";
    Printer<double>::stream(s, indent + "  ", v.g_wx);
    s << indent << "g_wy: ";
    Printer<double>::stream(s, indent + "  ", v.g_wy);
    s << indent << "g_wz: ";
    Printer<double>::stream(s, indent + "  ", v.g_wz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DE_MSGS_MESSAGE_QUERYPPBRICKREQUEST_H

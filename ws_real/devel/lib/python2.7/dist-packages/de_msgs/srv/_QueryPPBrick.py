# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from de_msgs/QueryPPBrickRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class QueryPPBrickRequest(genpy.Message):
  _md5sum = "01bf0e28af7b2b12d4b05c646cc7d76b"
  _type = "de_msgs/QueryPPBrickRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 h_x
float64 h_y
float64 h_z
float64 h_wx
float64 h_wy
float64 h_wz

float64 b_x
float64 b_y
float64 b_z
float64 b_wx
float64 b_wy
float64 b_wz

float64 g_x
float64 g_y
float64 g_z
float64 g_wx
float64 g_wy
float64 g_wz
"""
  __slots__ = ['h_x','h_y','h_z','h_wx','h_wy','h_wz','b_x','b_y','b_z','b_wx','b_wy','b_wz','g_x','g_y','g_z','g_wx','g_wy','g_wz']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       h_x,h_y,h_z,h_wx,h_wy,h_wz,b_x,b_y,b_z,b_wx,b_wy,b_wz,g_x,g_y,g_z,g_wx,g_wy,g_wz

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(QueryPPBrickRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.h_x is None:
        self.h_x = 0.
      if self.h_y is None:
        self.h_y = 0.
      if self.h_z is None:
        self.h_z = 0.
      if self.h_wx is None:
        self.h_wx = 0.
      if self.h_wy is None:
        self.h_wy = 0.
      if self.h_wz is None:
        self.h_wz = 0.
      if self.b_x is None:
        self.b_x = 0.
      if self.b_y is None:
        self.b_y = 0.
      if self.b_z is None:
        self.b_z = 0.
      if self.b_wx is None:
        self.b_wx = 0.
      if self.b_wy is None:
        self.b_wy = 0.
      if self.b_wz is None:
        self.b_wz = 0.
      if self.g_x is None:
        self.g_x = 0.
      if self.g_y is None:
        self.g_y = 0.
      if self.g_z is None:
        self.g_z = 0.
      if self.g_wx is None:
        self.g_wx = 0.
      if self.g_wy is None:
        self.g_wy = 0.
      if self.g_wz is None:
        self.g_wz = 0.
    else:
      self.h_x = 0.
      self.h_y = 0.
      self.h_z = 0.
      self.h_wx = 0.
      self.h_wy = 0.
      self.h_wz = 0.
      self.b_x = 0.
      self.b_y = 0.
      self.b_z = 0.
      self.b_wx = 0.
      self.b_wy = 0.
      self.b_wz = 0.
      self.g_x = 0.
      self.g_y = 0.
      self.g_z = 0.
      self.g_wx = 0.
      self.g_wy = 0.
      self.g_wz = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_18d().pack(_x.h_x, _x.h_y, _x.h_z, _x.h_wx, _x.h_wy, _x.h_wz, _x.b_x, _x.b_y, _x.b_z, _x.b_wx, _x.b_wy, _x.b_wz, _x.g_x, _x.g_y, _x.g_z, _x.g_wx, _x.g_wy, _x.g_wz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 144
      (_x.h_x, _x.h_y, _x.h_z, _x.h_wx, _x.h_wy, _x.h_wz, _x.b_x, _x.b_y, _x.b_z, _x.b_wx, _x.b_wy, _x.b_wz, _x.g_x, _x.g_y, _x.g_z, _x.g_wx, _x.g_wy, _x.g_wz,) = _get_struct_18d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_18d().pack(_x.h_x, _x.h_y, _x.h_z, _x.h_wx, _x.h_wy, _x.h_wz, _x.b_x, _x.b_y, _x.b_z, _x.b_wx, _x.b_wy, _x.b_wz, _x.g_x, _x.g_y, _x.g_z, _x.g_wx, _x.g_wy, _x.g_wz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 144
      (_x.h_x, _x.h_y, _x.h_z, _x.h_wx, _x.h_wy, _x.h_wz, _x.b_x, _x.b_y, _x.b_z, _x.b_wx, _x.b_wy, _x.b_wz, _x.g_x, _x.g_y, _x.g_z, _x.g_wx, _x.g_wy, _x.g_wz,) = _get_struct_18d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_18d = None
def _get_struct_18d():
    global _struct_18d
    if _struct_18d is None:
        _struct_18d = struct.Struct("<18d")
    return _struct_18d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from de_msgs/QueryPPBrickResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class QueryPPBrickResponse(genpy.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "de_msgs/QueryPPBrickResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success

"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(QueryPPBrickResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class QueryPPBrick(object):
  _type          = 'de_msgs/QueryPPBrick'
  _md5sum = '5f78500be0a2e11cc53c6852c6c558e0'
  _request_class  = QueryPPBrickRequest
  _response_class = QueryPPBrickResponse
